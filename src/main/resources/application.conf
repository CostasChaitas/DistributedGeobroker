application {
  api {
    ip = "0.0.0.0"
    port = 8000
    port = ${?API_PORT}
  }
}

akka {

  extensions = [
    "akka.cluster.metrics.ClusterMetricsExtension"
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"
  ]

  actor {
    provider = "cluster"

    allow-java-serialization = off

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      // General
      "java.util.ArrayList" = kryo
      "java.lang.String" = kryo
      // Message for communication between clients and brokers/servers
      "com.chaitas.masterthesis.Messages.ExternalMessages.ExternalMessage" = kryo
      // Messages for communication between brokers/servers(internal communication)
      "com.chaitas.masterthesis.Messages.InternalMessages.ProcessCONNECT" = kryo
      "com.chaitas.masterthesis.Messages.InternalMessages.ProcessDISCONNECT" = kryo
      "com.chaitas.masterthesis.Messages.InternalMessages.ProcessPINGREQ" = kryo
      "com.chaitas.masterthesis.Messages.InternalMessages.ProcessUNSUBSCRIBE" = kryo
      "com.chaitas.masterthesis.Messages.InternalMessages.ProcessSUBSCRIBE" = kryo
      "com.chaitas.masterthesis.Messages.InternalMessages.ProcessPUBLISH" = kryo
      "com.chaitas.masterthesis.Messages.InternalMessages.SendACK" = kryo
      "com.chaitas.masterthesis.Messages.InternalMessages.PublisherGeoMatching" = kryo
    }

    kryo{
      type = "graph"
      idstrategy = "explicit"
      serializer-pool-size = 16
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      implicit-registration-logging = false
      kryo-trace = false,
      resolve-subclasses = true,
      kryo-custom-serializer-init = "com.chaitas.masterthesis.Utils.AkkaKryoInitializer"
    }

  }

  cluster {
    seed-nodes = []
    seed-nodes = ${?SEED_NODES}
  }

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      bind-hostname = 0.0.0.0
      port = 2552
      port = ${?PORT}
    }
  }

  discovery {
    method = kubernetes-api
    method = ${?DISCOVERY_METHOD}
    kubernetes-api {
      pod-namespace = "default"
      pod-namespace = ${?K8S_NAMESPACE}
      pod-label-selector = "app=master-thesis-cluster"
      pod-label-selector = ${?K8S_SELECTOR}
      pod-port-name = "management"
      pod-port-name = ${?K8S_MANAGEMENT_PORT}
    }
  }


  management {
    http {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      bind-hostname = "0.0.0.0"
      port = 8558
      bind-port = 8558
    }
    cluster.bootstrap {
      contact-point-discovery {
        required-contact-point-nr = 2
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINTS}
      }
    }
  }

}

# Keep TCP connections alive
akka.http.server.websocket.periodic-keep-alive-max-idle = 1 second

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
//akka.cluster.metrics.native-library-extract-folder = ${user.dir}/target/native
//
//akka.cluster.jmx.multi-mbeans-in-same-jvm = on